{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Programming for Geographical Information Analysis: Core Skills (WUN)\n",
    "***\n",
    "## by Rashad A.K. Ahmed"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is a portfolio submitted for assessment as part of the Programming for Geographical Information Analysis: Core Skills module, in the MSc of Geographical Information Science program at the School of Geography, University of Leeds. The portfolio is an agent based model built up throughout the module tutorials. The model build up process can be traced in [this github repo](https://github.com/ra6had/Practical_Portfolio).\n",
    "\n",
    "The agents represent sheep which have the ability to move in the four cardinal directions based on randomly generated numbers. The sheep can also eat resources (grass) from their environment and share available resources with other sheep in their proximity.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model Libraries\n",
    "\n",
    "First we import the libraries upon which this model depends. \n",
    "+ [random](https://docs.python.org/3/library/random.html) for moving agents in psuedo random directions\n",
    "+ [csv](https://docs.python.org/3/library/csv.html) for reading and writing csv files\n",
    "+ [numpy](http://www.numpy.org/) utelized by the Agent class to compute the total amount of resources available in its environment\n",
    "+ [matplotlib.pyplot](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.html) for plotting the agents and the environment\n",
    "+ [matplotlib.animation](https://matplotlib.org/api/animation_api.html) for animating the plot\n",
    "+ [pandas](https://pandas.pydata.org/) used to construct DataFrames and write them to csv\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "import csv\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.animation as animation\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Creating the Agent Class\n",
    "\n",
    "After importing the libraries, we move on to creating our Agent class and defining its methods.\n",
    "\n",
    "The \\__init__() method provides the blueprint for instantiating Agents instantiate an agent. It requires two arguments:\n",
    "\n",
    "1. environment: a 2D list representing the environment\n",
    "2. agents: a list of all the agents with which the instantiated agent is to share this environment\n",
    "\n",
    "The agent class has four methods that enable the agent to enteract with its environment and other agents in it.\n",
    "\n",
    "1. move(steps): this method takes in the argument \"steps\" which is an integer representing the number of steps to take. The direction of the step is decided by a random number generated for each step\n",
    "2. eat(amount): this method makes the agent eat a certain amount from its environment \n",
    "3. distance_between(agent): this \n",
    "4. share_with_neighbours(neighbourhood): this method makes the agent share its store with agents within it \"neighbourhood\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Agent():\n",
    "\t\"\"\"\n",
    "\tCreate an Agent class.\n",
    "\tArguments:\n",
    "\tenvironment -- 2D indexed data representing the environment with which the\n",
    "                   the agents will interact.\n",
    "\tagents -- a list of agents with which the agent shares the enevironment\n",
    "\n",
    "    Methods:\n",
    "    move -- takes in a number of steps and moves agent in random directions.\n",
    "    eat -- takes in amount and makes the agent eat (consume) that amount from\n",
    "           its environment if the amount is available at the agent's location.\n",
    "   \"\"\"\n",
    "\n",
    "\tdef __init__(self, environment, agents):\n",
    "\t\tself.environment = environment\n",
    "\t\tself.agents = agents\n",
    "\t\tself.store = 0\n",
    "\t\tself.resources = np.sum(self.environment)\n",
    "\t\tself.y = random.randint(0, len(self.environment))\n",
    "\t\tself.x = random.randint(0, len(self.environment[0]))\n",
    "\n",
    "\tdef __str__(self):\n",
    "\t\treturn \"I'm an agent in: (\" + str(self.x) + ',' + str(self.y) + \").\\\n",
    "With a store of: \" + str(self.store)\n",
    "\n",
    "\n",
    "\tdef move(self, steps=10):\n",
    "\t\t\"\"\"Moves the agent a number of steps in random directions\n",
    "\n",
    "        keyword arguments:\n",
    "        steps -- an intiger representing the number of steps\n",
    "        \"\"\"\n",
    "\t\tfor i in range(steps):\n",
    "\n",
    "\t\t\tif random.random() < 0.5:\n",
    "\t\t\t\tself.y = (self.y + 1) % len(self.environment[0])\n",
    "\t\t\telse:\n",
    "\t\t\t\tself.y = (self.y - 1) % len(self.environment[0])\n",
    "\n",
    "\t\t\tif random.random() > 0.5:\n",
    "\t\t\t\tself.x = (self.x + 1) % len(self.environment)\n",
    "\t\t\telse:\n",
    "\t\t\t\tself.x = (self.x - 1) % len(self.environment)\n",
    "\n",
    "\n",
    "\tdef eat(self, amount=10):\n",
    "\t\t\"\"\"Make the agents eat a given amount from its environment\n",
    "\n",
    "        arguments:\n",
    "        amount -- an intiger representing the amount to eat from the\n",
    "        environment\n",
    "        \"\"\"\n",
    "\t\tif self.environment[self.y][self.x] > amount:\n",
    "\t\t\tself.environment[self.y][self.x] -= amount\n",
    "\t\t\tself.store += amount\n",
    "\n",
    "\tdef distance_between(self, agent):\n",
    "\t    \"\"\"\n",
    "\t    compute distances between agent and other agents in its environment.\n",
    "\n",
    "\t    arguments:\n",
    "\t    agent -- an with agent.x and agent.y attributes\n",
    "\n",
    "\t\treturns distances between self and agent.\n",
    "\t    \"\"\"\n",
    "\t    return abs(((self.y - agent.y)**2 + ((self.x - agent.x))**0.5))\n",
    "\n",
    "\tdef share_with_neighbours(self, neighbourhood=10):\n",
    "\t\t\"\"\"\n",
    "        Share store with neighbouring agents.\n",
    "\n",
    "\t\targuments:\n",
    "\t\tneighbourhood -- a number representing the neighbourhood\n",
    "\t\t\t\t\t\t radius around the agent.\n",
    "\t    \"\"\"\n",
    "\t\tself.neighbourhood = neighbourhood\n",
    "\t\tfor agent in self.agents:\n",
    "\t\t\t# Do not share with self\n",
    "\t\t\tif self.agents.index(agent) != self.agents.index(self):\n",
    "\t\t\t\t# Only share with proximate agents\n",
    "\t\t\t\tif self.distance_between(agent) <= self.neighbourhood:\n",
    "\t\t\t\t\tsum_store = self.store + agent.store\n",
    "\t\t\t\t\taverage = sum_store/2\n",
    "\t\t\t\t\tself.store = average\n",
    "\t\t\t\t\tagent.store = average"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Defining the Update Function\n",
    "\n",
    "The update funcation is called by the FuncAnimation constructor at every frame and it defines what the agents will do at every iteration. In this case, in every iteration each agent will __move__ a number of __steps__, __eat__ a __bite__, and __share_with_neighbours__ in its __neighbourhood__. The figure is then updated to show these changes.\n",
    "\n",
    "The update function can best be understood in relation to the FuncAnimation constructor, more on that to follow."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib qt\n",
    "\n",
    "def update(frames):\n",
    "\t\"\"\"\n",
    "\tUpdate the animation frames.\n",
    "\n",
    "\tThis function is passed onto animation.FuncAnimation(). It utelizes\n",
    "\tthe\tglobal variable \"num_of_iterations\" to simultaneously iterate through\n",
    "\tthe agents making them perform certain methods and update the animation\n",
    "\tframe after each iteration.\n",
    "\n",
    "\t\"\"\"\n",
    "\t# Declare the global variables\n",
    "\tglobal num_of_iterations\n",
    "\tglobal dataframe\n",
    "\n",
    "\t\"\"\"\n",
    "\tThe following if statement ensures that the animation and the methods\n",
    "\tare called a definate number of times, i.e. \"num_of_iterations\"\n",
    "\n",
    "\tOnce the iterations are finished, record the final locations and the\n",
    "\tamount of resources in each agents store and finally convert the output\n",
    "\tinto a dataframe and write it to a csv file\n",
    "\t\"\"\"\n",
    "\tif num_of_iterations > 0:\n",
    "\t\tfig.clear()\n",
    "\t\tplt.title('Sheep are busy eating') # Sheep are still eating\n",
    "\t\t# make each agent move, eat and share\n",
    "\t\tfor agent in agents:\n",
    "\t\t\tagent.move(steps)\n",
    "\t\t\tagent.eat(bite)\n",
    "\t\t\tagent.share_with_neighbours(neighbourhood)\n",
    "\t\tplt.imshow(environment, origin='lower')\n",
    "\t\tplt.colorbar()\n",
    "\t\tplt.xlim(0, len(environment[0]))\n",
    "\t\tplt.ylim(0, len(environment))\n",
    "\t\tfor i in range(num_of_agents):\n",
    "\t\t\tplt.scatter(agents[i].x,agents[i].y)\n",
    "\t\tnum_of_iterations -= 1 # Reduce by one\n",
    "\t\tprint('Another bite, please!') #should be printed num_of_iterations\n",
    "\telse:\n",
    "\t\tprint('baa baa, no more grass please!')\n",
    "\t\tplt.title('Sheep are done eating')\n",
    "\t\tdataframe = pd.DataFrame()\n",
    "\t\tend_location_x = []\n",
    "\t\tend_location_y = []\n",
    "\n",
    "\t\t# Record the agents' final location\n",
    "\t\tfor i in range(len(agents)):\n",
    "\t\t\tend_location_x.append(agents[i].x)\n",
    "\t\t\tend_location_y.append(agents[i].y)\n",
    "\n",
    "\t\t# Construct a dictionary for each agent then append it to dataframe\n",
    "\t\tfor i in range(len(agents)):\n",
    "\t\t\tdf = {}\n",
    "\t\t\tdf['Store'] = agents[i].store\n",
    "\t\t\tdf['Final Location X'] =  end_location_y[i]\n",
    "\t\t\tdf['Final Location Y'] =  end_location_y[i]\n",
    "\t\t\tdf['Initial Location X'] = st_location_x[i]\n",
    "\t\t\tdf['Initial Location Y'] = st_location_y[i]\n",
    "\t\t\tdataframe = dataframe.append(df, ignore_index=True)\n",
    "\t\tprint(dataframe)\n",
    "\n",
    "\t\t# Write the output dataframe to a csv file\n",
    "\t\twith open('output.csv', 'w') as datafile:\n",
    "\t\t\tdataframe.to_csv(datafile)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Set Model Parameters\n",
    "\n",
    "In this code block we set the model parameters, the color map with which to display the environment, and the figure size and style."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "num_of_agents = 200\n",
    "num_of_iterations = 100\n",
    "bite = 20\n",
    "steps = 10\n",
    "neighbourhood = 10\n",
    "fig = plt.figure(figsize=(15, 15))\n",
    "plt.style.use('classic')\n",
    "plt.set_cmap('Greens')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Reading the Environment Data\n",
    "\n",
    "In the following code segment, we read in the envieonment data from a csv file and store it as a list of lists, where each list in environment represents a row of pixels and the values inside the rows represent pixel values. \n",
    "\n",
    "Below is an image of the environment before it is altered by the agents.\n",
    "<img src=\"Environment.png\">"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('in.txt', newline='') as f:\n",
    "    reader = csv.reader(f, quoting=csv.QUOTE_NONNUMERIC)\n",
    "    # Create and populate the environment variable with data\n",
    "    #from the csv file just read.\n",
    "    environment = []\n",
    "    for line in reader:\n",
    "        rowlist = []\n",
    "        for value in line:\n",
    "            rowlist.append(value)\n",
    "        environment.append(rowlist)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Instantiating Agents\n",
    "\n",
    "In the following step, we instantiate Agents and append them to a list based on the \"num_of_agents\" variable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "agents = []\n",
    "for i in range(num_of_agents):\n",
    "    agents.append(Agent(environment, agents))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Getting Initial Agent Properties\n",
    "\n",
    "The following lines of code iterates through the list of agents and appends each agent's initial x and y coordinates to a corresponding list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "st_location_x = []\n",
    "st_location_y = []\n",
    "for agent in agents:\n",
    "\tst_location_x.append(agent.x)\n",
    "\tst_location_y.append(agent.y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Animate!\n",
    "\n",
    "Here we construct a [FuncAnimation Class](https://matplotlib.org/api/_as_gen/matplotlib.animation.FuncAnimation.html) from the matplotlib.animation library. The FuncAnimation is instantiated with five arguments in this instance.\n",
    "\n",
    "* fig = fig: which is defined in the Model Parameters section\n",
    "* func = update: the update function defined earlier, the FuncAnimation class calls this function at every frame\n",
    "* frames = num_of_iterations: this argument defines the number of frames in the animation\n",
    "* interval = 1: defines the delay in miliseconds between frames\n",
    "* repeat = False: to stop the function from repeating once the sequence of frames is completed\n",
    "\n",
    "### More on update, frames and FuncAnimation\n",
    "\n",
    "The FuncAnimation constructor calls the update function at every frame (num_of_iterations), yet everytime update() is called, it alters the num_of_iterations variable. Let us have another look at upadate and how it interacts with frames and FuncAnimation.\n",
    "\n",
    "update() first checks if num_of_iterations > 0, i.e. if there are frames left to update. If True, it updates the frame. AT the end of each frame update it reduces the num_of_iterations by 1.\n",
    "\n",
    "\n",
    "    if num_of_iterations > 0:\n",
    "\t\tfig.clear()\n",
    "\t\tplt.title('Sheep are busy eating') # Sheep are still eating\n",
    "\t\t# make each agent move, eat and share\n",
    "\t\tfor agent in agents:\n",
    "\t\t\tagent.move(steps)\n",
    "\t\t\tagent.eat(bite)\n",
    "\t\t\tagent.share_with_neighbours(neighbourhood)\n",
    "\t\tplt.imshow(environment, origin='lower')\n",
    "\t\tplt.colorbar()\n",
    "\t\tplt.xlim(0, len(environment[0]))\n",
    "\t\tplt.ylim(0, len(environment))\n",
    "\t\tfor i in range(num_of_agents):\n",
    "\t\t\tplt.scatter(agents[i].x,agents[i].y)\n",
    "\t\tnum_of_iterations -= 1 # Reduce by one\"\"\"\n",
    "\n",
    "When the frames are finished, i.e. num_of_iterations > 0 returns False, then the function moves on to capture the final state of our agents by getting their final locations and the amount of resources in their store.\n",
    "\n",
    "    else:\n",
    "\t\tplt.title('Sheep are done eating')\n",
    "\t\tdataframe = pd.DataFrame()\n",
    "\t\tend_location_x = []\n",
    "\t\tend_location_y = []\n",
    "\n",
    "\t\t# Record the agents' final location\n",
    "\t\tfor i in range(len(agents)):\n",
    "\t\t\tend_location_x.append(agents[i].x)\n",
    "\t\t\tend_location_y.append(agents[i].y)\n",
    "\n",
    "\t\t# Construct a dictionary for each agent then append it to dataframe\n",
    "\t\tfor i in range(len(agents)):\n",
    "\t\t\tdf = {}\n",
    "\t\t\tdf['Store'] = agents[i].store\n",
    "\t\t\tdf['Final Location X'] =  end_location_y[i]\n",
    "\t\t\tdf['Final Location Y'] =  end_location_y[i]\n",
    "\t\t\tdf['Initial Location X'] = st_location_x[i]\n",
    "\t\t\tdf['Initial Location Y'] = st_location_y[i]\n",
    "\t\t\tdataframe = dataframe.append(df, ignore_index=True)\n",
    "\t\tprint(dataframe)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "Another bite, please!\n",
      "baa baa, no more grass please!\n",
      "     Final Location X  Final Location Y  Initial Location X  \\\n",
      "0                11.0              11.0                91.0   \n",
      "1                 7.0               7.0                 5.0   \n",
      "2               122.0             122.0               233.0   \n",
      "3               228.0             228.0               171.0   \n",
      "4               141.0             141.0               189.0   \n",
      "5               275.0             275.0               210.0   \n",
      "6               240.0             240.0               195.0   \n",
      "7               249.0             249.0               284.0   \n",
      "8               207.0             207.0               128.0   \n",
      "9               127.0             127.0               277.0   \n",
      "10              270.0             270.0                30.0   \n",
      "11               38.0              38.0               284.0   \n",
      "12              299.0             299.0                89.0   \n",
      "13               59.0              59.0                56.0   \n",
      "14              144.0             144.0               180.0   \n",
      "15               39.0              39.0                91.0   \n",
      "16              199.0             199.0               155.0   \n",
      "17               64.0              64.0               287.0   \n",
      "18              258.0             258.0               273.0   \n",
      "19               46.0              46.0                 1.0   \n",
      "20              134.0             134.0                48.0   \n",
      "21              286.0             286.0                80.0   \n",
      "22              210.0             210.0               204.0   \n",
      "23              135.0             135.0                60.0   \n",
      "24               26.0              26.0               206.0   \n",
      "25              190.0             190.0               133.0   \n",
      "26              255.0             255.0               106.0   \n",
      "27              226.0             226.0               240.0   \n",
      "28              287.0             287.0               144.0   \n",
      "29              222.0             222.0               220.0   \n",
      "..                ...               ...                 ...   \n",
      "170              21.0              21.0                86.0   \n",
      "171             168.0             168.0               254.0   \n",
      "172             245.0             245.0               199.0   \n",
      "173              40.0              40.0               148.0   \n",
      "174             167.0             167.0                77.0   \n",
      "175              87.0              87.0               176.0   \n",
      "176             220.0             220.0                37.0   \n",
      "177             162.0             162.0               257.0   \n",
      "178             168.0             168.0               195.0   \n",
      "179             129.0             129.0               108.0   \n",
      "180             111.0             111.0               278.0   \n",
      "181             256.0             256.0               107.0   \n",
      "182             116.0             116.0               298.0   \n",
      "183              54.0              54.0               293.0   \n",
      "184             162.0             162.0               276.0   \n",
      "185             239.0             239.0               144.0   \n",
      "186             293.0             293.0                14.0   \n",
      "187             235.0             235.0               145.0   \n",
      "188             258.0             258.0               108.0   \n",
      "189             101.0             101.0               249.0   \n",
      "190             245.0             245.0               262.0   \n",
      "191              47.0              47.0               284.0   \n",
      "192              74.0              74.0                46.0   \n",
      "193             257.0             257.0               237.0   \n",
      "194              54.0              54.0                36.0   \n",
      "195             128.0             128.0               211.0   \n",
      "196             234.0             234.0               166.0   \n",
      "197              17.0              17.0                54.0   \n",
      "198             102.0             102.0               218.0   \n",
      "199             295.0             295.0                98.0   \n",
      "\n",
      "     Initial Location Y        Store  \n",
      "0                  11.0  1985.539096  \n",
      "1                   7.0  2003.781283  \n",
      "2                 106.0  1994.089207  \n",
      "3                 220.0  2005.788044  \n",
      "4                 179.0  2011.469636  \n",
      "5                   5.0  2000.685367  \n",
      "6                 220.0  2008.986537  \n",
      "7                 285.0  1987.376668  \n",
      "8                 163.0  1997.761680  \n",
      "9                 109.0  2014.547270  \n",
      "10                286.0  2000.180420  \n",
      "11                 58.0  1987.923115  \n",
      "12                269.0  1990.256296  \n",
      "13                 47.0  1996.541327  \n",
      "14                118.0  1986.894385  \n",
      "15                287.0  2002.761130  \n",
      "16                251.0  1982.983316  \n",
      "17                 54.0  1988.899235  \n",
      "18                238.0  2009.341118  \n",
      "19                  6.0  1994.462360  \n",
      "20                164.0  1981.548886  \n",
      "21                 18.0  1994.309607  \n",
      "22                192.0  1992.977077  \n",
      "23                147.0  1985.184648  \n",
      "24                 40.0  1999.855348  \n",
      "25                200.0  1992.258971  \n",
      "26                231.0  2006.238618  \n",
      "27                166.0  2007.279198  \n",
      "28                259.0  1988.749668  \n",
      "29                218.0  2010.465300  \n",
      "..                  ...          ...  \n",
      "170                51.0  1992.849283  \n",
      "171               162.0  1992.192659  \n",
      "172               239.0  2007.705064  \n",
      "173                44.0  1995.342122  \n",
      "174               159.0  2003.848500  \n",
      "175               131.0  1998.488360  \n",
      "176               240.0  1997.698256  \n",
      "177               184.0  2005.159054  \n",
      "178               210.0  1992.192659  \n",
      "179               159.0  2007.875472  \n",
      "180               137.0  2003.112458  \n",
      "181               238.0  2000.787131  \n",
      "182                84.0  2002.252150  \n",
      "183                26.0  1991.087247  \n",
      "184               158.0  2005.159054  \n",
      "185               197.0  1994.806416  \n",
      "186               271.0  2002.772847  \n",
      "187               151.0  2000.628494  \n",
      "188               230.0  1999.845956  \n",
      "189               127.0  2004.069205  \n",
      "190               267.0  2007.705064  \n",
      "191                35.0  1999.801805  \n",
      "192                88.0  2003.417114  \n",
      "193               265.0  2005.824207  \n",
      "194                48.0  1994.462360  \n",
      "195               112.0  2014.547270  \n",
      "196               204.0  2000.628494  \n",
      "197                21.0  1999.194190  \n",
      "198                86.0  2004.069205  \n",
      "199               291.0  2006.514572  \n",
      "\n",
      "[200 rows x 5 columns]\n"
     ]
    }
   ],
   "source": [
    "ani = animation.FuncAnimation(fig, func=update, frames=num_of_iterations,\\\n",
    "\t\t\t\t\t\t\t   interval=1, repeat=False)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
